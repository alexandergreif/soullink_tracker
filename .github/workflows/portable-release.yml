name: Build and Release Portable SoulLink Tracker

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v2.0.0)'
        required: true
        default: 'v2.0.0'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Windows Portable Executable
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'


      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller>=6.0.0
          pip install -r requirements.txt

      - name: Install optional dependencies for system tray
        run: |
          pip install pillow pystray || true

      - name: Verify dependency installation
        run: |
          echo "Checking critical dependencies..."
          python -c "import fastapi; print(f'FastAPI: {fastapi.__version__}')"
          python -c "import uvicorn; print(f'Uvicorn: {uvicorn.__version__}')"
          python -c "import sqlalchemy; print(f'SQLAlchemy: {sqlalchemy.__version__}')"
          python -c "import PyInstaller; print(f'PyInstaller: {PyInstaller.__version__}')"
          echo "All critical dependencies verified [OK]"

      - name: Test basic imports
        run: |
          python -c "
          import sys
          from pathlib import Path
          sys.path.insert(0, str(Path('src')))
          from soullink_tracker.launcher import SoulLinkLauncher
          from soullink_tracker.config import get_config
          print('[OK] All imports successful')
          "

      - name: Create version info
        run: |
          $version = "${{ github.ref_name }}"
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $version = "${{ github.event.inputs.version }}"
          }
          $versionInfo = @"
          VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=(2,0,0,0),
              prodvers=(2,0,0,0),
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0)
            ),
            kids=[
              StringFileInfo([
                StringTable('040904B0', [
                  StringStruct('CompanyName', 'SoulLink Tracker'),
                  StringStruct('FileDescription', 'Pokemon SoulLink Tracker'),
                  StringStruct('FileVersion', '$version'),
                  StringStruct('InternalName', 'soullink-tracker'),
                  StringStruct('LegalCopyright', 'MIT License'),
                  StringStruct('OriginalFilename', 'soullink-tracker.exe'),
                  StringStruct('ProductName', 'SoulLink Tracker Portable'),
                  StringStruct('ProductVersion', '$version'),
                ])
              ]),
              VarFileInfo([VarStruct('Translation', [1033, 1200])])
            ]
          )
          "@
          New-Item -Path "build" -ItemType Directory -Force
          $versionInfo | Out-File -FilePath "build/version_info.txt" -Encoding UTF8

      - name: Build admin executables (Normal)
        run: |
          python build_dual.py --admin-only

      - name: Build admin executables (Debug - Console Visible)
        run: |
          python build_dual.py --admin-only --debug

      - name: Build user executables (Normal)
        run: |
          python build_dual.py --user-only

      - name: Build user executables (Debug - Console Visible)
        run: |
          python build_dual.py --user-only --debug

      - name: Test executables
        run: |
          # Test admin executables
          if (Test-Path "dist/soullink-tracker-admin.exe") {
            Write-Host "Admin executable built successfully"
            $size = (Get-Item "dist/soullink-tracker-admin.exe").Length / 1MB
            Write-Host "Admin Size: $([math]::Round($size, 1)) MB"
          } else {
            Write-Error "Admin executable not found"
            exit 1
          }
          
          if (Test-Path "dist/soullink-tracker-admin-debug.exe") {
            Write-Host "Admin debug executable built successfully"
            $size = (Get-Item "dist/soullink-tracker-admin-debug.exe").Length / 1MB
            Write-Host "Admin Debug Size: $([math]::Round($size, 1)) MB"
          } else {
            Write-Error "Admin debug executable not found"
            exit 1
          }
          
          # Test user executables
          if (Test-Path "dist/soullink-tracker-user.exe") {
            Write-Host "User executable built successfully"
            $size = (Get-Item "dist/soullink-tracker-user.exe").Length / 1MB
            Write-Host "User Size: $([math]::Round($size, 1)) MB"
          } else {
            Write-Error "User executable not found"
            exit 1
          }
          
          if (Test-Path "dist/soullink-tracker-user-debug.exe") {
            Write-Host "User debug executable built successfully"
            $size = (Get-Item "dist/soullink-tracker-user-debug.exe").Length / 1MB
            Write-Host "User Debug Size: $([math]::Round($size, 1)) MB"
          } else {
            Write-Error "User debug executable not found"
            exit 1
          }


      - name: Package release assets
        run: |
          # Determine version
          VERSION="${{ github.ref_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          # Create admin package directory
          ADMIN_PACKAGE_NAME="soullink-tracker-admin-${VERSION}-windows-x64"
          mkdir -p "packages/${ADMIN_PACKAGE_NAME}"
          
          # Copy admin executables
          cp "dist/soullink-tracker-admin.exe" "packages/${ADMIN_PACKAGE_NAME}/"
          cp "dist/soullink-tracker-admin-debug.exe" "packages/${ADMIN_PACKAGE_NAME}/"
          
          # Create user package directory
          USER_PACKAGE_NAME="soullink-tracker-user-${VERSION}-windows-x64"
          mkdir -p "packages/${USER_PACKAGE_NAME}"
          
          # Copy user executables
          cp "dist/soullink-tracker-user.exe" "packages/${USER_PACKAGE_NAME}/"
          cp "dist/soullink-tracker-user-debug.exe" "packages/${USER_PACKAGE_NAME}/"
          
          # Copy documentation to both packages
          cp README.md "packages/${ADMIN_PACKAGE_NAME}/" || true
          cp LICENSE "packages/${ADMIN_PACKAGE_NAME}/" || true
          cp README.md "packages/${USER_PACKAGE_NAME}/" || true
          cp LICENSE "packages/${USER_PACKAGE_NAME}/" || true
          
          # Create admin quick start guide
          cat > "packages/${ADMIN_PACKAGE_NAME}/QUICK_START_ADMIN.txt" << EOF
          SoulLink Tracker Admin Edition ${VERSION}
          ==========================================
          
          FOR ADMINISTRATORS/HOSTS:
          This is the admin version that runs the server and dashboard.
          
          Quick Start:
          1. Extract this package to any folder
          2. Run the executable:
             - Windows (Normal): Double-click soullink-tracker-admin.exe
             - Windows (Debug): Double-click soullink-tracker-admin-debug.exe
          3. Your browser will open automatically to the dashboard
          4. Create a new run and add players
          5. Share API URL and player tokens with participants
          
          Features:
          - Zero installation required
          - Built-in web dashboard
          - Real-time tracking via WebSocket
          - Automatic database setup
          
          Troubleshooting:
          - Use debug version for console output
          - Check logs/ directory for detailed logs
          - Add to antivirus whitelist if blocked
          
          For more information, see README.md
          EOF
          
          # Create user quick start guide
          cat > "packages/${USER_PACKAGE_NAME}/QUICK_START_USER.txt" << EOF
          SoulLink Tracker User Edition ${VERSION}
          =========================================
          
          FOR PLAYERS:
          This is the user version that connects to the admin server.
          
          Quick Start:
          1. Extract this package to any folder
          2. Get API URL and player token from your admin
          3. Run the executable:
             - Windows (Normal): Double-click soullink-tracker-user.exe
             - Windows (Debug): Double-click soullink-tracker-user-debug.exe
          4. The Lua folder will open automatically
          5. Load pokemon_tracker_v3.lua in your DeSmuME emulator
          6. Configure config.lua with your API URL if needed
          
          Features:
          - Zero installation required
          - Automatic Lua script setup
          - Built-in watcher for event processing
          - System tray icon for easy access
          
          Troubleshooting:
          - Use debug version for console output
          - Check logs_user/ directory for logs
          - Ensure admin server is running
          - Add to antivirus whitelist if blocked
          
          For emulator setup, see client/README.md
          EOF
          
          # Create troubleshooting guide for both packages
          for PACKAGE in "${ADMIN_PACKAGE_NAME}" "${USER_PACKAGE_NAME}"; do
            cat > "packages/${PACKAGE}/ANTIVIRUS_TROUBLESHOOTING.txt" << EOF
          SoulLink Tracker - Antivirus Troubleshooting Guide
          ==================================================
          
          ANTIVIRUS FALSE POSITIVE ISSUE:
          Some antivirus software may flag this executable as suspicious.
          This is a common false positive with PyInstaller-built applications.
          
          WHY THIS HAPPENS:
          - The executable contains a bundled Python interpreter
          - It unpacks files to temporary directories during execution
          - These behaviors can trigger heuristic virus detection
          
          SOLUTIONS:
          
          1. WHITELIST THE EXECUTABLE:
             - Windows Defender: Add folder to exclusions in Windows Security
             - Other antivirus: Add soullink-tracker.exe to whitelist/exceptions
          
          2. USE THE DEBUG VERSION:
             - Run soullink-tracker-debug.exe instead
             - Shows console output to verify it's working correctly
             - Same functionality, just with visible console window
          
          3. TEMPORARY DISABLE (NOT RECOMMENDED):
             - Temporarily disable real-time protection
             - Run the application
             - Re-enable protection afterward
          
          VERIFICATION:
          - The source code is open source: https://github.com/alexandergreif/Soullink_Tracker
          - You can build from source if preferred
          - The debug version shows all operations transparently
          
          This is a legitimate application and safe to run.
          EOF
          done
          
          # Create archives using PowerShell
          cd packages
          powershell -Command "Compress-Archive -Path '${ADMIN_PACKAGE_NAME}' -DestinationPath '${ADMIN_PACKAGE_NAME}.zip'"
          powershell -Command "Compress-Archive -Path '${USER_PACKAGE_NAME}' -DestinationPath '${USER_PACKAGE_NAME}.zip'"
          cd ..
          
          echo "ADMIN_PACKAGE_NAME=${ADMIN_PACKAGE_NAME}" >> $GITHUB_ENV
          echo "USER_PACKAGE_NAME=${USER_PACKAGE_NAME}" >> $GITHUB_ENV
        shell: bash

      - name: Generate checksums
        run: |
          cd packages
          powershell -Command "Get-FileHash '${ADMIN_PACKAGE_NAME}.zip' -Algorithm SHA256 | Format-List Hash | Out-String" > "${ADMIN_PACKAGE_NAME}.zip.sha256"
          powershell -Command "Get-FileHash '${USER_PACKAGE_NAME}.zip' -Algorithm SHA256 | Format-List Hash | Out-String" > "${USER_PACKAGE_NAME}.zip.sha256"
          cd ..
        shell: bash

      - name: Upload admin build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ADMIN_PACKAGE_NAME }}
          path: packages/${{ env.ADMIN_PACKAGE_NAME }}.zip
          retention-days: 30

      - name: Upload user build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.USER_PACKAGE_NAME }}
          path: packages/${{ env.USER_PACKAGE_NAME }}.zip
          retention-days: 30

      - name: Upload admin checksums
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ADMIN_PACKAGE_NAME }}-checksum
          path: packages/${{ env.ADMIN_PACKAGE_NAME }}.zip.sha256
          retention-days: 30

      - name: Upload user checksums
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.USER_PACKAGE_NAME }}-checksum
          path: packages/${{ env.PACKAGE_NAME }}.zip.sha256
          retention-days: 30

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Organize release assets
        run: |
          mkdir -p final-release
          find release-assets -name "*.zip" -exec cp {} final-release/ \;
          find release-assets -name "*.sha256" -exec cp {} final-release/ \;
          
          echo "Release assets:"
          ls -la final-release/

      - name: Generate release notes
        run: |
          VERSION="${{ github.ref_name }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          fi
          
          cat > RELEASE_NOTES.md << EOF
          # SoulLink Tracker Portable Edition ${VERSION}
          
          ## What's New
          
          This is the portable edition of SoulLink Tracker - no installation required!
          
          ### Features
          - **Zero Installation** - Just download, extract, and run
          - **Windows Support** - Optimized for Windows 10+ (64-bit)
          - **Auto-Browser Launch** - Dashboard opens automatically
          - **Built-in Setup Wizard** - Easy configuration
          - **Embedded Resources** - All dependencies included
          
          ### Download
          
          | Platform | Download | Size |
          |----------|----------|------|
          | Windows 10+ (64-bit) | [soullink-tracker-${VERSION}-windows-x64.zip](./soullink-tracker-${VERSION}-windows-x64.zip) | ~45MB |
          
          ### Quick Start
          
          1. **Download** the Windows package
          2. **Extract** the ZIP file to any folder  
          3. **Run** the executable: Double-click \`soullink-tracker.exe\`
          4. **Follow** the setup wizard in your browser
          
          ### Verification
          
          SHA256 checksums are provided for each download to verify file integrity.
          
          ### System Requirements
          
          - **Windows**: Windows 10 or later (64-bit)
          - **Memory**: 512MB RAM minimum
          - **Storage**: 100MB free space
          
          ### Support
          
          - [Documentation](https://github.com/alex/soullink-tracker)
          - [Report Issues](https://github.com/alex/soullink-tracker/issues)
          - [Discussions](https://github.com/alex/soullink-tracker/discussions)
          
          ---
          
          **Note**: This portable version includes all the functionality of the regular SoulLink Tracker but with dramatically simplified setup. If you prefer the traditional installation method, see the [installation guide](README.md).
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
          name: SoulLink Tracker Portable ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}
          body_path: RELEASE_NOTES.md
          files: final-release/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notification:
    name: Post-Release Notification
    needs: release
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Success notification
        run: |
          echo "[SUCCESS] SoulLink Tracker Portable Edition released successfully!"
          echo "[RELEASE] Release: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}"
          echo "[LINK] Check: https://github.com/${{ github.repository }}/releases"