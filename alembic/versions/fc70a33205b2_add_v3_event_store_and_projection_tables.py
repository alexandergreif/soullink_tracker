"""Add v3 event store and projection tables

Revision ID: fc70a33205b2
Revises: 
Create Date: 2025-08-10 13:27:51.986595

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# Import custom types
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / 'src'))
import soullink_tracker.db.models


# revision identifiers, used by Alembic.
revision: str = 'fc70a33205b2'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('routes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(length=100), nullable=False),
    sa.Column('region', sa.String(length=10), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('runs',
    sa.Column('id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('rules_json', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('species',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('family_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_species_family_id', 'species', ['family_id'], unique=False)
    op.create_table('blocklist',
    sa.Column('run_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('family_id', sa.Integer(), nullable=False),
    sa.Column('origin', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.PrimaryKeyConstraint('run_id', 'family_id')
    )
    op.create_table('links',
    sa.Column('id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('run_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('route_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('run_id', 'route_id', name='uq_link_per_route_per_run')
    )
    op.create_table('players',
    sa.Column('id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('run_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('game', sa.String(length=50), nullable=False),
    sa.Column('region', sa.String(length=10), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('run_id', 'name', name='uq_player_name_per_run')
    )
    op.create_index('ix_player_token_hash', 'players', ['token_hash'], unique=False)
    op.create_table('encounters',
    sa.Column('id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('run_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('player_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('route_id', sa.Integer(), nullable=False),
    sa.Column('species_id', sa.Integer(), nullable=False),
    sa.Column('family_id', sa.Integer(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('shiny', sa.Boolean(), nullable=False),
    sa.Column('method', sa.String(length=20), nullable=False),
    sa.Column('rod_kind', sa.String(length=10), nullable=True),
    sa.Column('time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('dupes_skip', sa.Boolean(), nullable=False),
    sa.Column('fe_finalized', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.ForeignKeyConstraint(['species_id'], ['species.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_encounter_family_time', 'encounters', ['family_id', 'time'], unique=False)
    op.create_index('ix_encounter_route_species', 'encounters', ['route_id', 'species_id'], unique=False)
    op.create_index('ix_encounter_run_player', 'encounters', ['run_id', 'player_id'], unique=False)
    op.create_index('ix_encounter_status', 'encounters', ['status'], unique=False)
    op.create_table('events',
    sa.Column('id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('run_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('player_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('payload_json', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('seq', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('run_id', 'seq', name='uq_event_run_seq')
    )
    op.create_index('ix_event_run_player_created', 'events', ['run_id', 'player_id', 'created_at'], unique=False)
    op.create_index('ix_event_run_seq', 'events', ['run_id', 'seq'], unique=False)
    op.create_index('ix_event_type_created', 'events', ['type', 'created_at'], unique=False)
    op.create_table('idempotency_keys',
    sa.Column('key', sa.String(length=255), nullable=False),
    sa.Column('run_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('player_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('request_hash', sa.String(length=255), nullable=False),
    sa.Column('response_json', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_index('ix_idempotency_created_at', 'idempotency_keys', ['created_at'], unique=False)
    op.create_table('party_status',
    sa.Column('run_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('player_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('pokemon_key', sa.String(length=255), nullable=False),
    sa.Column('alive', sa.Boolean(), nullable=False),
    sa.Column('last_update', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.PrimaryKeyConstraint('run_id', 'player_id', 'pokemon_key')
    )
    op.create_table('route_progress',
    sa.Column('player_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('run_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('route_id', sa.Integer(), nullable=False),
    sa.Column('fe_finalized', sa.Boolean(), nullable=False),
    sa.Column('last_update', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ),
    sa.ForeignKeyConstraint(['run_id'], ['runs.id'], ),
    sa.PrimaryKeyConstraint('player_id', 'run_id', 'route_id')
    )
    op.create_index('ix_route_progress_fe_finalized', 'route_progress', ['run_id', 'route_id', 'fe_finalized'], unique=False)
    op.create_index('ix_route_progress_run_route', 'route_progress', ['run_id', 'route_id'], unique=False)
    
    # Add partial unique constraint for fe_finalized=TRUE to prevent race conditions
    # Only one player can have a finalized first encounter per route in a run
    op.execute("""
        CREATE UNIQUE INDEX uq_route_progress_fe_finalized 
        ON route_progress (run_id, route_id) 
        WHERE fe_finalized = 1
    """)
    op.create_table('link_members',
    sa.Column('link_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('player_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.Column('encounter_id', soullink_tracker.db.models.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['encounter_id'], ['encounters.id'], ),
    sa.ForeignKeyConstraint(['link_id'], ['links.id'], ),
    sa.ForeignKeyConstraint(['player_id'], ['players.id'], ),
    sa.PrimaryKeyConstraint('link_id', 'player_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('link_members')
    # Drop the partial unique constraint first
    op.execute("DROP INDEX IF EXISTS uq_route_progress_fe_finalized")
    op.drop_index('ix_route_progress_run_route', table_name='route_progress')
    op.drop_index('ix_route_progress_fe_finalized', table_name='route_progress')
    op.drop_table('route_progress')
    op.drop_table('party_status')
    op.drop_index('ix_idempotency_created_at', table_name='idempotency_keys')
    op.drop_table('idempotency_keys')
    op.drop_index('ix_event_type_created', table_name='events')
    op.drop_index('ix_event_run_seq', table_name='events')
    op.drop_index('ix_event_run_player_created', table_name='events')
    op.drop_table('events')
    op.drop_index('ix_encounter_status', table_name='encounters')
    op.drop_index('ix_encounter_run_player', table_name='encounters')
    op.drop_index('ix_encounter_route_species', table_name='encounters')
    op.drop_index('ix_encounter_family_time', table_name='encounters')
    op.drop_table('encounters')
    op.drop_index('ix_player_token_hash', table_name='players')
    op.drop_table('players')
    op.drop_table('links')
    op.drop_table('blocklist')
    op.drop_index('ix_species_family_id', table_name='species')
    op.drop_table('species')
    op.drop_table('runs')
    op.drop_table('routes')
    # ### end Alembic commands ###
